/*
 * This file is generated by jOOQ.
 */
package aftrolle.com.steam.store.analytics.gen.tables.daos;


import aftrolle.com.steam.store.analytics.gen.tables.SteamTopSell;
import aftrolle.com.steam.store.analytics.gen.tables.records.SteamTopSellRecord;

import java.time.OffsetDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SteamTopSellDao extends DAOImpl<SteamTopSellRecord, aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell, Record2<Integer, OffsetDateTime>> {

    /**
     * Create a new SteamTopSellDao without any configuration
     */
    public SteamTopSellDao() {
        super(SteamTopSell.STEAM_TOP_SELL, aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell.class);
    }

    /**
     * Create a new SteamTopSellDao with an attached configuration
     */
    public SteamTopSellDao(Configuration configuration) {
        super(SteamTopSell.STEAM_TOP_SELL, aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<Integer, OffsetDateTime> getId(aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell object) {
        return compositeKeyRecord(object.getPosition(), object.getTimestamp());
    }

    /**
     * Fetch records that have <code>timestamp IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByTimestamp(OffsetDateTime... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>position IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByPosition(Integer... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.POSITION, values);
    }

    /**
     * Fetch records that have <code>prev_price IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByPrevPrice(Float... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.PREV_PRICE, values);
    }

    /**
     * Fetch records that have <code>app_ids IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByAppIds(Integer[]... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.APP_IDS, values);
    }

    /**
     * Fetch records that have <code>package_ids IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByPackageIds(Integer[]... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.PACKAGE_IDS, values);
    }

    /**
     * Fetch records that have <code>bundle_ids IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByBundleIds(Integer[]... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.BUNDLE_IDS, values);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<aftrolle.com.steam.store.analytics.gen.tables.pojos.SteamTopSell> fetchByPrice(Float... values) {
        return fetch(SteamTopSell.STEAM_TOP_SELL.PRICE, values);
    }
}
